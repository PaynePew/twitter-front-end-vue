{"version":3,"sources":["webpack:///./src/views/ChatPublic.vue","webpack:///./src/views/ChatPublic.vue?3554","webpack:///./src/views/ChatPublic.vue?3192"],"names":["class","users","onlineUsers","chatSubmit","ref","name","components","ChatUserList","Chatroom","data","currentUserId","computed","currentUser","state","authentication","created","this","$socket","connect","id","window","onbeforeunload","leavePublic","sockets","publicLogin","updateStatus","publicLogout","allMessage","handleHistory","newMessage","handleNewMessage","mounted","$nextTick","joinPublic","beforeUnmount","methods","emit","content","status","Math","random","type","addMessage","history","map","_data","User","avatar","userId","createdAt","unwrappedMessage","fetchMessage","UserId","trim","$store","commit","$refs","chatroomRef","scrollToggle","message","mixins","__exports__","render"],"mappings":"mKACOA,MAAM,6B,kHAAX,eAGM,MAHN,EAGM,CAFJ,eAAqC,GAAtBC,MAAO,EAAAC,aAAW,kBACjC,eAAwD,GAA7C,aAAa,EAAAC,WAAYC,IAAI,e,iJAU7B,GACbC,KAAM,aACNC,WAAY,CACVC,eAAA,KACAC,WAAA,MAEFC,KANa,WAOX,MAAO,CACLP,YAAa,GACbQ,eAAgB,IAGpBC,SAAU,kBACL,eAAS,CACVC,YAAa,SAACC,GAAD,OAAWA,EAAMC,eAAeF,gBAGjDG,QAjBa,WAiBH,WACRC,KAAKC,QAAQC,UAEbF,KAAKN,cAAgBM,KAAKJ,YAAYO,GAKtCC,OAAOC,eAAiB,WACtB,EAAKC,YAAY,EAAKZ,iBAI1Ba,QAAS,CAEPC,YAFO,SAEKtB,GACVc,KAAKS,aAAavB,IAGpBwB,aANO,SAMMxB,GACXc,KAAKS,aAAavB,IAGpByB,WAVO,SAUIlB,GACTO,KAAKY,cAAcnB,IAGrBoB,WAdO,SAcIpB,GACTO,KAAKc,iBAAiBrB,KAI1BsB,QAjDa,WAkDXf,KAAKgB,WAAU,WACbhB,KAAKiB,WAAWjB,KAAKN,mBAIzBwB,cAvDa,WAwDXlB,KAAKM,YAAYN,KAAKN,gBAExByB,QAAS,CACPF,WADO,SACId,GACTH,KAAKC,QAAQmB,KAAK,cAAejB,IAEnCG,YAJO,SAIKH,GACVH,KAAKC,QAAQmB,KAAK,cAAejB,IAEnCM,aAPO,SAOMvB,GACX,MAA0BA,EAAY,GAA9BG,EAAR,EAAQA,KAAMgC,EAAd,EAAcA,QACRC,EAAS,CACbjC,OACAc,GAAoB,IAAhBoB,KAAKC,SACTH,UACAI,KAAM,UAERzB,KAAK0B,WAAWJ,GAChBtB,KAAKd,YAAcA,EAAY,IAEjC0B,cAlBO,SAkBOnB,GACZ,IAAMkC,EAAUlC,EAAKmC,KAAI,SAACC,GACxB,MAAqCA,EAAMC,KAAnCzC,EAAR,EAAQA,KAAM0C,EAAd,EAAcA,OAAYC,EAA1B,EAAsB7B,GACdkB,EAA2BQ,EAA3BR,QAASY,EAAkBJ,EAAlBI,UAAW9B,EAAO0B,EAAP1B,GACtB+B,EAAmB,CACvBF,SACA3C,OACA0C,SACAV,UACAlB,KACA8B,aAEF,OAAOC,KAETlC,KAAKmC,aAAaR,IAEpBb,iBAlCO,SAkCUrB,GACf,MAAyBA,EAAK,GAAtBJ,EAAR,EAAQA,KAAM0C,EAAd,EAAcA,OACd,EAAmDtC,EAAK,GAAhD4B,EAAR,EAAQA,QAASY,EAAjB,EAAiBA,UAAW9B,EAA5B,EAA4BA,GAAY6B,EAAxC,EAAgCI,OAC1BvB,EAAa,CACjBmB,SACA3C,OACA0C,SACAV,UACAlB,KACA8B,aAEFjC,KAAK0B,WAAWb,IAElB1B,WA/CO,SA+CIkC,GACJA,EAAQgB,QAGbrC,KAAKC,QAAQmB,KAAK,cAAe,CAAEC,UAASlB,GAAIH,KAAKN,iBAEjDyC,aArDC,SAqDY1C,GAAM,wKACjB,EAAK6C,OAAOC,OAAO,sBAAuB9C,GADzB,OAGvB,EAAK+C,MAAMC,YAAYC,eAHA,8CAKnBhB,WA1DC,SA0DUiB,GAAS,wKAClB,EAAKL,OAAOC,OAAO,qBAAsBI,GADvB,OAGxB,EAAKH,MAAMC,YAAYC,cAAa,GAHZ,+CAM5BE,OAAQ,CAAC,S,iCChIX,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,gB,kCCTf","file":"js/chunk-64b97b9e.d9979784.js","sourcesContent":["<template>\n  <div class=\"public-message__container\">\n    <ChatUserList :users=\"onlineUsers\" />\n    <Chatroom @chat-submit=\"chatSubmit\" ref=\"chatroomRef\" />\n  </div>\n</template>\n\n<script>\nimport ChatUserList from \"../components/ChatUserList.vue\";\nimport Chatroom from \"../components/Chatroom.vue\";\nimport { fromNowMixin } from \"@/utils/mixins\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"ChatPublic\",\n  components: {\n    ChatUserList,\n    Chatroom,\n  },\n  data() {\n    return {\n      onlineUsers: [],\n      currentUserId: -1,\n    };\n  },\n  computed: {\n    ...mapState({\n      currentUser: (state) => state.authentication.currentUser,\n    }),\n  },\n  created() {\n    this.$socket.connect();\n    // NavBar登出會先revoke currentUser，導致id為null，此處存入data取消computed響應\n    this.currentUserId = this.currentUser.id;\n    // vue lifecycle beforeUnmount(or beforeDestroy in Vue2)預設沒有註冊window.onbeforeunload\n    // refresh page後不會執行beforeUnmount，可以在main.js做vue.$destroy的事件註冊，或是在component中直接呼叫\n    // 另一種解法是直接在server端對所有client端的publicLogout發送登出訊息(io.sockets.emit or io.emit)\n    // 不會影響privateChat\n    window.onbeforeunload = () => {\n      this.leavePublic(this.currentUserId);\n    };\n  },\n  // vue3-sockets會在mounted階段註冊event\n  sockets: {\n    // 註冊接收登入狀況\n    publicLogin(onlineUsers) {\n      this.updateStatus(onlineUsers);\n    },\n    // 註冊接收登出狀況\n    publicLogout(onlineUsers) {\n      this.updateStatus(onlineUsers);\n    },\n    // 註冊接收歷史訊息\n    allMessage(data) {\n      this.handleHistory(data);\n    },\n    // 註冊接收新訊息\n    newMessage(data) {\n      this.handleNewMessage(data);\n    },\n  },\n  // mounted後下一個Tick加入PublicRoom\n  mounted() {\n    this.$nextTick(function () {\n      this.joinPublic(this.currentUserId);\n    });\n  },\n  // component unomount時，離開PublicRoom，但仍保留connect狀態，refresh page不觸發\n  beforeUnmount() {\n    this.leavePublic(this.currentUserId);\n  },\n  methods: {\n    joinPublic(id) {\n      this.$socket.emit(\"publicEnter\", id);\n    },\n    leavePublic(id) {\n      this.$socket.emit(\"publicLeave\", id);\n    },\n    updateStatus(onlineUsers) {\n      const { name, content } = onlineUsers[0];\n      const status = {\n        name,\n        id: Math.random() * 10000,\n        content,\n        type: \"notice\",\n      };\n      this.addMessage(status);\n      this.onlineUsers = onlineUsers[1];\n    },\n    handleHistory(data) {\n      const history = data.map((_data) => {\n        const { name, avatar, id: userId } = _data.User;\n        const { content, createdAt, id } = _data;\n        const unwrappedMessage = {\n          userId,\n          name,\n          avatar,\n          content,\n          id,\n          createdAt,\n        };\n        return unwrappedMessage;\n      });\n      this.fetchMessage(history);\n    },\n    handleNewMessage(data) {\n      const { name, avatar } = data[1];\n      const { content, createdAt, id, UserId: userId } = data[0];\n      const newMessage = {\n        userId,\n        name,\n        avatar,\n        content,\n        id,\n        createdAt,\n      };\n      this.addMessage(newMessage);\n    },\n    chatSubmit(content) {\n      if (!content.trim()) {\n        return;\n      }\n      this.$socket.emit(\"sendMessage\", { content, id: this.currentUserId });\n    },\n    async fetchMessage(data) {\n      await this.$store.commit(\"chat/setMessageList\", data);\n      // 歷史紀錄快速滾動底部\n      this.$refs.chatroomRef.scrollToggle();\n    },\n    async addMessage(message) {\n      await this.$store.commit(\"chat/addNewMessage\", message);\n      // 新訊息動畫滾動底部\n      this.$refs.chatroomRef.scrollToggle(true);\n    },\n  },\n  mixins: [fromNowMixin],\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.public-message {\n  &__container {\n    width: 981px;\n    height: 100%;\n    display: flex;\n  }\n}\n</style>\n","import { render } from \"./ChatPublic.vue?vue&type=template&id=5de1fc5a&scoped=true\"\nimport script from \"./ChatPublic.vue?vue&type=script&lang=js\"\nexport * from \"./ChatPublic.vue?vue&type=script&lang=js\"\n\nimport \"./ChatPublic.vue?vue&type=style&index=0&id=5de1fc5a&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\User\\\\Work\\\\AlphaCamp\\\\Lecture-3\\\\twitter\\\\twitter-front-end-vue\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5de1fc5a\"]])\n\nexport default __exports__","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./ChatPublic.vue?vue&type=style&index=0&id=5de1fc5a&lang=scss&scoped=true\""],"sourceRoot":""}